package Lesson_46;

import java.util.ArrayDeque;

// Interface Deque
public class DequeInformation {
    /*
    Интерфейс Deque (от "double-ended queue", что можно перевести как "двусторонняя очередь")
    в Java представляет собой коллекцию, которая предоставляет возможность добавлять и удалять элементы как в начале,
    так и в конце структуры данных. Deque можно использовать как стек (где добавление и удаление происходят с
    одного конца), как очередь (где элементы добавляются с одного конца и удаляются с другого), а также для других
    задач, где требуется такая гибкость.
    */

//    Интерфейс Deque расширяет интерфейс Queue и определяет ряд методов для работы с двусторонней очередью:

//   ********* Добавление элемента:****************

//    addFirst(E e) или offerFirst(E e): Добавляет элемент в начало очереди.

//    addLast(E e) или offerLast(E e): Добавляет элемент в конец очереди.
//    ********* Удаление элемента: ***************
//
//    removeFirst() или pollFirst(): Удаляет и возвращает элемент с начала очереди.
//    removeLast() или pollLast(): Удаляет и возвращает элемент с конца очереди.

//    ********* Просмотр элемента: **************
//
//    getFirst() или peekFirst(): Возвращает элемент с начала очереди без его удаления.
//    getLast() или peekLast(): Возвращает элемент с конца очереди без его удаления.


//    Deque - это интерфейс, и существует несколько его реализаций в Java, такие как LinkedList и ArrayDeque.
//    Выбор конкретной реализации зависит от требований к производительности, потокобезопасности и другим факторам.

    /*
     Метод pop() - это операция, используемая для удаления и возврата верхнего элемента из стека.
     Стек - это структура данных, работающая по принципу "последний вошел, первый вышел" (Last-In, First-Out, LIFO).
     Это означает, что элементы добавляются и удаляются только с вершины стека.

     В контексте стека, метод pop() выполняет следующие действия:

     Удаляет верхний элемент из стека.
     Возвращает удаленный элемент, чтобы вы могли получить доступ к его значению.


     Метод push() - это операция, используемая для добавления элемента в стек. Стек - это структура данных,
     работающая по принципу "последний вошел, первый вышел" (Last-In, First-Out, LIFO). Это означает, что элементы
     добавляются и удаляются только с вершины стека.

     В контексте стека, метод push() выполняет следующие действия:

     Добавляет указанный элемент на вершину стека.
     Увеличивает размер стека на один.
     */

//    ***********************************
    /*
    ArrayDeque - это класс в Java, который представляет собой двустороннюю (двунаправленную) очередь,
    реализованную как динамический массив (расширяющийся и уменьшающийся по мере необходимости). Это означает, что
    ArrayDeque может добавлять и удалять элементы как с начала, так и с конца очереди, что делает его эффективным для
    разнообразных задач.

    Вот некоторые ключевые характеристики ArrayDeque:

    Двусторонность: Вы можете добавлять и удалять элементы как с начала, так и с конца очереди. Это делает
    ArrayDeque удобным для реализации как стека (LIFO), так и очереди (FIFO).

    Динамический размер: ArrayDeque автоматически расширяет и уменьшает свой размер по мере необходимости,
    что позволяет эффективно управлять памятью.

    Не синхронизирован: ArrayDeque не является потокобезопасной структурой данных. Если вам нужна потокобезопасность,
    вы можете использовать LinkedBlockingDeque из пакета java.util.concurrent, который предоставляет синхронизированную
    версию.

   Быстрое добавление и удаление: ArrayDeque предоставляет высокую производительность для операций добавления и
   удаления элементов как с начала, так и с конца очереди.

   Отсутствие ограничения размера: ArrayDeque не имеет ограничения на размер, который вы можете хранить, за исключением
   ограничения размера массива данных.
     */

    public static void main(String[] args) {

        ArrayDeque<String> fruits = new ArrayDeque<>();
        fruits.add("Lemon");
        fruits.addFirst("Orange");

        System.out.println(fruits); // [Orange, Lemon]

        fruits.push("Kiwi");
        System.out.println(fruits);// [Kiwi, Orange, Lemon]

        fruits.addLast("Apple");

        String first = fruits.getFirst();

        while (fruits.peek() != null){
            System.out.println(fruits.pop());
        }


    }


}
