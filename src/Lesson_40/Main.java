package Lesson_40;

public class Main {
    public static void main(String[] args) {




    Order o1 = new Order(1, "order1");
    Order o2 = new Order(1, "order1");
        System.out.println(o1==o2); // false
        System.out.println(o1.equals(o2)); // false //  сравниваються ссылки, так как метод equals не
        // переопределен //  true -  после переопределения

        /*
        Для корректного сравнивания по значению, объектов, класс которых мы создали сами, можно переопределить
        метод equals(). Иначе он будет сравнивать ссылки.

        equals()  contract
        1. reflexive -  объект должен быть равен самому себе
        2. symmetric -  x.equals(y) должен возвращать тот же результат, что и y.equals(x)
        3. transitive - если x.equals(y) = y.equals(z), то x.equals(z)
        4. consistent -  значение equals() может меняться, только если измениться значение, содержащиеся в нем
         */

        /*
        hashCode()- это метод в Java, который используется для вычисления целочисленного хеш-кода(хеш-значения) объекта.
        Хеш-код - это целое число, которое представляет объект и обычно используется в хеш-таблицах
        и коллекциях для оптимизации поиска и доступа к объектам.
        это целое число, которое генерируется с помощью алгоритма кеширования

        Целочисленное значение: Метод hashCode() всегда возвращает целое число типа int.

         Уникальность не гарантирована: Два разных объекта могут иметь одинаковые хеш-коды (коллизия),
         но хорошая реализация метода hashCode() должна стремиться к минимизации вероятности коллизий
         для различных объектов.

         Консистентность: Если объект не изменяется, вызов hashCode() должен возвращать одно и то же значение
         в течение всего времени жизни объекта.

         Согласованность с equals(): Два объекта, равные согласно методу equals(), должны иметь одинаковые хеш-коды.

         Производительность: Метод hashCode() должен быть эффективным и быстро выполняться, так как он вызывается
         часто в коллекциях.

         Правила переопределения: Если переопределяется метод equals(), обычно также переопределяется метод hashCode(),
         чтобы обеспечить согласованное поведение.

      1. При вызове на одном и том же объекте несколько раз во время выполнения программы  hashCode()
         должен возвращать одно и тоже значение, при условии что значения полей не менялись.
         При этом само значение не обязательно должно оставаться неизменным при нескольких вызовах программы
      2. Если два объекта равны, в соответствии с методом   equals(), то их  hashCode() (хешкоды) так же должны
         быть одинаковыми.
      3. если два объекта не равны,   их хешкоды не обязателльно должны быть разными. Как правило они разные,
         но теоретически они могут быть и одинаковыми

         */

        Order o22 = new Order(22, "order22");
         // тестируем работу хешкода
        System.out.println(o1.hashCode()); // -1008769405
        System.out.println(o2.hashCode()); // -1008769405
        System.out.println(o22.hashCode()); // -1207109511


        /*
        БИНАРНЫЕ ДЕРЕВЬЯ

        Структура данных, в которая состоит из узлов  строиться по следующим правиласм:
        1. Каждый узел имеет не более двух детей
        2. Каждое значение меньше значения узла станет левым ребенком левого ребенка
        3. Каждое значение большее или равное значению узла станет правым ребенком или ребенком правого ребенка
         */




}

}
